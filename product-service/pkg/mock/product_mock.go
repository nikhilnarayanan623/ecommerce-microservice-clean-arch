// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interfaces/product.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	request "github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/product-service/pkg/utils/request"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// SaveCategory mocks base method.
func (m *MockProductRepository) SaveCategory(ctx context.Context, category request.AddCategory) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCategory", ctx, category)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCategory indicates an expected call of SaveCategory.
func (mr *MockProductRepositoryMockRecorder) SaveCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCategory", reflect.TypeOf((*MockProductRepository)(nil).SaveCategory), ctx, category)
}

// SaveVariation mocks base method.
func (m *MockProductRepository) SaveVariation(ctx context.Context, variation request.AddVariation) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVariation", ctx, variation)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveVariation indicates an expected call of SaveVariation.
func (mr *MockProductRepositoryMockRecorder) SaveVariation(ctx, variation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVariation", reflect.TypeOf((*MockProductRepository)(nil).SaveVariation), ctx, variation)
}

// SaveVariationOption mocks base method.
func (m *MockProductRepository) SaveVariationOption(ctx context.Context, variationOption request.AddVariationOption) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVariationOption", ctx, variationOption)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveVariationOption indicates an expected call of SaveVariationOption.
func (mr *MockProductRepositoryMockRecorder) SaveVariationOption(ctx, variationOption interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVariationOption", reflect.TypeOf((*MockProductRepository)(nil).SaveVariationOption), ctx, variationOption)
}
