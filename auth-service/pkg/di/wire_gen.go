// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/api"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/api/service"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/client"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/config"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/db"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/otp"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/repository"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/token"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/auth-service/pkg/usecase"
)

// Injectors from wire.go:

func InitializeServices(cfg *config.Config) (*api.ServiceServer, error) {
	gormDB, err := db.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	authRepository := repository.NewAuthRepository(gormDB)
	userClient, err := client.NewUserClient(cfg)
	if err != nil {
		return nil, err
	}
	otpVerification := otp.NewTwilioOtpAuth(cfg)
	tokenAuth := token.NewJWTAuth(cfg)
	authUseCase := usecase.NewAuthUsecase(authRepository, userClient, otpVerification, tokenAuth)
	authServiceServer := service.NewAuthServiceServer(authUseCase)
	serviceServer, err := api.NewServerGRPC(cfg, authServiceServer)
	if err != nil {
		return nil, err
	}
	return serviceServer, nil
}
