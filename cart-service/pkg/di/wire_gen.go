// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/cart-service/pkg/api"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/cart-service/pkg/api/service"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/cart-service/pkg/client"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/cart-service/pkg/config"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/cart-service/pkg/db"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/cart-service/pkg/repository"
	"github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/cart-service/pkg/usecase"
)

// Injectors from wire.go:

func InitializeService(cfg *config.Config) (*api.Server, error) {
	gormDB, err := db.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	cartRepository := repository.NewCartRepository(gormDB)
	productClient, err := client.NewProductServiceClient(cfg)
	if err != nil {
		return nil, err
	}
	cartUseCase := usecase.NewCartUseCase(cartRepository, productClient)
	cartServiceServer := service.NewCartServiceServer(cartUseCase)
	server, err := api.NewServerGRPC(cfg, cartServiceServer)
	if err != nil {
		return nil, err
	}
	return server, nil
}
