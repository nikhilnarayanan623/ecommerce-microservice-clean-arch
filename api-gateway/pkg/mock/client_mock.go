// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/pb/auth_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/nikhilnarayanan623/ecommerce-microservice-clean-arch/api-gateway/pkg/pb"
	grpc "google.golang.org/grpc"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// RefreshAccessToken mocks base method.
func (m *MockAuthServiceClient) RefreshAccessToken(ctx context.Context, in *pb.RefreshAccessTokenRequest, opts ...grpc.CallOption) (*pb.RefreshAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshAccessToken", varargs...)
	ret0, _ := ret[0].(*pb.RefreshAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAccessToken indicates an expected call of RefreshAccessToken.
func (mr *MockAuthServiceClientMockRecorder) RefreshAccessToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAccessToken", reflect.TypeOf((*MockAuthServiceClient)(nil).RefreshAccessToken), varargs...)
}

// UserLogin mocks base method.
func (m *MockAuthServiceClient) UserLogin(ctx context.Context, in *pb.UserLoginRequest, opts ...grpc.CallOption) (*pb.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserLogin", varargs...)
	ret0, _ := ret[0].(*pb.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockAuthServiceClientMockRecorder) UserLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockAuthServiceClient)(nil).UserLogin), varargs...)
}

// UserSignup mocks base method.
func (m *MockAuthServiceClient) UserSignup(ctx context.Context, in *pb.UserSignupRequest, opts ...grpc.CallOption) (*pb.UserSignupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserSignup", varargs...)
	ret0, _ := ret[0].(*pb.UserSignupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockAuthServiceClientMockRecorder) UserSignup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockAuthServiceClient)(nil).UserSignup), varargs...)
}

// UserSignupVerify mocks base method.
func (m *MockAuthServiceClient) UserSignupVerify(ctx context.Context, in *pb.UserSignupVerifyRequest, opts ...grpc.CallOption) (*pb.UserSignupVerifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserSignupVerify", varargs...)
	ret0, _ := ret[0].(*pb.UserSignupVerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignupVerify indicates an expected call of UserSignupVerify.
func (mr *MockAuthServiceClientMockRecorder) UserSignupVerify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignupVerify", reflect.TypeOf((*MockAuthServiceClient)(nil).UserSignupVerify), varargs...)
}

// VerifyUserAccessToken mocks base method.
func (m *MockAuthServiceClient) VerifyUserAccessToken(ctx context.Context, in *pb.VerifyUserAccessTokenRequest, opts ...grpc.CallOption) (*pb.VerifyUserAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyUserAccessToken", varargs...)
	ret0, _ := ret[0].(*pb.VerifyUserAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserAccessToken indicates an expected call of VerifyUserAccessToken.
func (mr *MockAuthServiceClientMockRecorder) VerifyUserAccessToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserAccessToken", reflect.TypeOf((*MockAuthServiceClient)(nil).VerifyUserAccessToken), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// RefreshAccessToken mocks base method.
func (m *MockAuthServiceServer) RefreshAccessToken(arg0 context.Context, arg1 *pb.RefreshAccessTokenRequest) (*pb.RefreshAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*pb.RefreshAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAccessToken indicates an expected call of RefreshAccessToken.
func (mr *MockAuthServiceServerMockRecorder) RefreshAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAccessToken", reflect.TypeOf((*MockAuthServiceServer)(nil).RefreshAccessToken), arg0, arg1)
}

// UserLogin mocks base method.
func (m *MockAuthServiceServer) UserLogin(arg0 context.Context, arg1 *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockAuthServiceServerMockRecorder) UserLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockAuthServiceServer)(nil).UserLogin), arg0, arg1)
}

// UserSignup mocks base method.
func (m *MockAuthServiceServer) UserSignup(arg0 context.Context, arg1 *pb.UserSignupRequest) (*pb.UserSignupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserSignupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockAuthServiceServerMockRecorder) UserSignup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockAuthServiceServer)(nil).UserSignup), arg0, arg1)
}

// UserSignupVerify mocks base method.
func (m *MockAuthServiceServer) UserSignupVerify(arg0 context.Context, arg1 *pb.UserSignupVerifyRequest) (*pb.UserSignupVerifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignupVerify", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserSignupVerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignupVerify indicates an expected call of UserSignupVerify.
func (mr *MockAuthServiceServerMockRecorder) UserSignupVerify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignupVerify", reflect.TypeOf((*MockAuthServiceServer)(nil).UserSignupVerify), arg0, arg1)
}

// VerifyUserAccessToken mocks base method.
func (m *MockAuthServiceServer) VerifyUserAccessToken(arg0 context.Context, arg1 *pb.VerifyUserAccessTokenRequest) (*pb.VerifyUserAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*pb.VerifyUserAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserAccessToken indicates an expected call of VerifyUserAccessToken.
func (mr *MockAuthServiceServerMockRecorder) VerifyUserAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserAccessToken", reflect.TypeOf((*MockAuthServiceServer)(nil).VerifyUserAccessToken), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockUnsafeAuthServiceServer is a mock of UnsafeAuthServiceServer interface.
type MockUnsafeAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceServerMockRecorder
}

// MockUnsafeAuthServiceServerMockRecorder is the mock recorder for MockUnsafeAuthServiceServer.
type MockUnsafeAuthServiceServerMockRecorder struct {
	mock *MockUnsafeAuthServiceServer
}

// NewMockUnsafeAuthServiceServer creates a new mock instance.
func NewMockUnsafeAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthServiceServer {
	mock := &MockUnsafeAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceServer) EXPECT() *MockUnsafeAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockUnsafeAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockUnsafeAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockUnsafeAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}
